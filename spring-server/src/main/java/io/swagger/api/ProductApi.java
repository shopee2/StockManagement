/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.util.List;
import io.swagger.model.Product;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-11-17T06:22:14.703Z")

@Api(value = "product", description = "the product API")
@RequestMapping(value = "/phwts/Stock/1.0")
public interface ProductApi {

    @ApiOperation(value = "Batch delete a products", nickname = "productDelete", notes = "", tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Products deleted") })
    @RequestMapping(value = "/product",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> productDelete(@ApiParam(value = "IDs of products to be deleted" ,required=true )  @Valid @RequestBody List<Integer> body);


    @ApiOperation(value = "List all products", nickname = "productGet", notes = "", response = Product.class, responseContainer = "List", tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "All products listed", response = Product.class, responseContainer = "List") })
    @RequestMapping(value = "/product",
        method = RequestMethod.GET)
    ResponseEntity<List<Product>> productGet();


    @ApiOperation(value = "Delete a product", nickname = "productIdDelete", notes = "", tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Product deleted successfully") })
    @RequestMapping(value = "/product/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> productIdDelete(@ApiParam(value = "ID of product to be deleted",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Retrieve product name and descriptions", nickname = "productIdGet", notes = "", response = Product.class, tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Product metadata", response = Product.class) })
    @RequestMapping(value = "/product/{id}",
        method = RequestMethod.GET)
    ResponseEntity<Product> productIdGet(@ApiParam(value = "ID of product",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Partially update an existing product", nickname = "productIdPatch", notes = "", tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Product updated") })
    @RequestMapping(value = "/product/{id}",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> productIdPatch(@ApiParam(value = "ID of product to be updated",required=true) @PathVariable("id") Long id,@ApiParam(value = "Modified product object" ,required=true )  @Valid @RequestBody Product body);


    @ApiOperation(value = "Update an existing product", nickname = "productIdPut", notes = "", tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Category updated") })
    @RequestMapping(value = "/product/{id}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> productIdPut(@ApiParam(value = "ID of product to be updated",required=true) @PathVariable("id") Long id,@ApiParam(value = "Modified product object" ,required=true )  @Valid @RequestBody Product body);


    @ApiOperation(value = "Batch update a products", nickname = "productPatch", notes = "", tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Products updated") })
    @RequestMapping(value = "/product",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> productPatch(@ApiParam(value = "Modified products array" ,required=true )  @Valid @RequestBody List<Product> body);


    @ApiOperation(value = "Add a new product", nickname = "productPost", notes = "", tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Product added"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/product",
        method = RequestMethod.POST)
    ResponseEntity<Void> productPost(@ApiParam(value = "Product object that needs to be added" ,required=true )  @Valid @RequestBody Product body);

}
