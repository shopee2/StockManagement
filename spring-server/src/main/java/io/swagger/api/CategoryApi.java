/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Category;
import io.swagger.model.Product;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-11-17T06:22:14.703Z")

@Api(value = "category", description = "the category API")
@RequestMapping(value = "/phwts/Stock/1.0")
public interface CategoryApi {

    @ApiOperation(value = "List all categories", nickname = "categoryGet", notes = "", response = Category.class, responseContainer = "List", tags={ "category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "All category listed", response = Category.class, responseContainer = "List") })
    @RequestMapping(value = "/category",
        method = RequestMethod.GET)
    ResponseEntity<List<Category>> categoryGet();


    @ApiOperation(value = "Count products in category", nickname = "categoryIdCountGet", notes = "", response = Long.class, tags={ "category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Products counts in category", response = Long.class) })
    @RequestMapping(value = "/category/{id}/count",
        method = RequestMethod.GET)
    ResponseEntity<Long> categoryIdCountGet(@ApiParam(value = "ID of category to be counted",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Delete a category", nickname = "categoryIdDelete", notes = "", tags={ "category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Category deleted successfully") })
    @RequestMapping(value = "/category/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> categoryIdDelete(@ApiParam(value = "ID of category to be deleted",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Retrieve category name and descriptions", nickname = "categoryIdGet", notes = "", response = Category.class, tags={ "category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Category metadata", response = Category.class) })
    @RequestMapping(value = "/category/{id}",
        method = RequestMethod.GET)
    ResponseEntity<Category> categoryIdGet(@ApiParam(value = "ID of category",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Partially update an existing category", nickname = "categoryIdPatch", notes = "", tags={ "category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Category updated") })
    @RequestMapping(value = "/category/{id}",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> categoryIdPatch(@ApiParam(value = "ID of category to be updated",required=true) @PathVariable("id") Long id,@ApiParam(value = "Modified category object" ,required=true )  @Valid @RequestBody Category body);


    @ApiOperation(value = "List products in category", nickname = "categoryIdProductsGet", notes = "", response = Product.class, responseContainer = "List", tags={ "category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "All products in category", response = Product.class, responseContainer = "List") })
    @RequestMapping(value = "/category/{id}/products",
        method = RequestMethod.GET)
    ResponseEntity<List<Product>> categoryIdProductsGet(@ApiParam(value = "ID of category to be listed",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Update an existing category", nickname = "categoryIdPut", notes = "", tags={ "category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Category updated") })
    @RequestMapping(value = "/category/{id}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> categoryIdPut(@ApiParam(value = "ID of category to be updated",required=true) @PathVariable("id") Long id,@ApiParam(value = "Modified category object" ,required=true )  @Valid @RequestBody Category body);


    @ApiOperation(value = "Add a new category", nickname = "categoryPost", notes = "", tags={ "category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Category added"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/category",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> categoryPost(@ApiParam(value = "Category object that needs to be added" ,required=true )  @Valid @RequestBody Category body);

}
